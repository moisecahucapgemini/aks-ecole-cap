eksctl create cluster -f eks.yaml
kubectl create namespace nginx
kubectl apply -f svc-nginx.yaml
kubectl apply -f deployment-nginx.yaml
kubectl apply -f configmap.yaml
eksctl create fargateprofile --cluster eks-ebc --name fp-nginx --namespace nginx
kubectl rollout restart -n nginx deployment nginx-deployment
kubectl scale deployment nginx-deployment -n nginx --replicas=2

créer un role IAM AmazonEKSFargatePodExecutionRole, attacher la policy AmazonEKSFargatePodExecutionRolePolicy
aws eks create-fargate-profile --fargate-profile-name coredns --cluster-name eks-ebc --pod-execution-role-arn arn:aws:iam::852733476320:role/AmazonEKSFargatePodExecutionRole --selectors namespace=kube-system --subnets subnet-0fe5f8eb965d92d6c subnet-04af1f7c337d56332;
kubectl patch deployment coredns -n kube-system --type json -p='[{"op": "remove", "path": "/spec/template/metadata/annotations/eks.amazonaws.com~1compute-type"}]'
kubectl rollout restart -n kube-system deployment coredns
eksctl delete fargateprofile --cluster eks-ebc --name coredns
eksctl delete fargateprofile --cluster eks-ebc --name fp-nginx

eksctl delete cluster --name=ebc-test
 


In the command line window, check the AWS CLI version:

aws --version
curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
Unzip the file:

unzip awscliv2.zip
See where the current AWS CLI is installed:

which aws
It should be /usr/bin/aws.

Update it:

sudo ./aws/install --bin-dir /usr/bin --install-dir /usr/bin/aws-cli --update
Check the version of AWS CLI:

aws --version
It should now be updated.

Configure the CLI:

aws configure
For AWS Access Key ID, paste in the access key ID you copied earlier.

For AWS Secret Access Key, paste in the secret access key you copied earlier.

For Default region name, enter us-east-1.

For Default output format, enter json.

Download kubectl:

curl -o kubectl https://amazon-eks.s3.us-west-2.amazonaws.com/1.16.8/2020-04-16/bin/linux/amd64/kubectl
Apply execute permissions to the binary:

chmod +x ./kubectl
Copy the binary to a directory in your path:

mkdir -p $HOME/bin && cp ./kubectl $HOME/bin/kubectl && export PATH=$PATH:$HOME/bin
Ensure kubectl is installed:

kubectl version --short --client
Download eksctl:

curl --silent --location "https://github.com/weaveworks/eksctl/releases/latest/download/eksctl_$(uname -s)_amd64.tar.gz" | tar xz -C /tmp
Move the extracted binary to /usr/bin:

sudo mv /tmp/eksctl /usr/bin
Get the version of eksctl:

eksctl version
See the options with eksctl:

eksctl help
Provision an EKS Cluster
Provision an EKS cluster with three worker nodes in us-east-1:

eksctl create cluster --name dev --version 1.21 --region us-east-1 --nodegroup-name standard-workers --node-type t3.micro --nodes 3 --nodes-min 1 --nodes-max 4 --managed
If your EKS resources can't be deployed due to AWS capacity issues, delete your eksctl-dev-cluster CloudFormation stack and retry the command using the --zones parameter and suggested availability zones from the CREATE_FAILED message:

AWS::EKS::Cluster/ControlPlane: CREATE_FAILED – "Resource handler returned message: \"Cannot create cluster 'dev' because us-east-1e, the targeted availability zone, does not currently have sufficient capacity to support the cluster. Retry and choose from these availability zones: us-east-1a, us-east-1b, us-east-1c, us-east-1d, us-east-1f (Service: Eks, Status Code: 400, Request ID: 21e7e4aa-17a5-4c79-a911-bf86c4e93373)\" (RequestToken: 18b731b0-92a1-a779-9a69-f61e90b97ee1, HandlerErrorCode: InvalidRequest)"
In this example, the --zones parameter was added using the us-east-1a,us-east-1b,us-east-1c,us-east-1d,us-east-1f AZs from the message above:

eksctl create cluster --name dev --version 1.21 --region us-east-1 --zones us-east-1a,us-east-1b,us-east-1c,us-east-1d,us-east-1f --nodegroup-name standard-workers --node-type t3.micro --nodes 3 --nodes-min 1 --nodes-max 4 --managed
It will take 10–15 minutes since it's provisioning the control plane and worker nodes, attaching the worker nodes to the control plane, and creating the VPC, security group, and Auto Scaling group.

In the AWS Management Console, navigate to CloudFormation and take a look at what’s going on there.

Select the eksctl-dev-cluster stack (this is our control plane).

Click Events, so you can see all the resources that are being created.

We should then see another new stack being created — this one is our node group.

Once both stacks are complete, navigate to Elastic Kubernetes Service > Clusters.

Click the listed cluster.

If you see a Your current user or role does not have access to Kubernetes objects on this EKS cluster message just ignore it, as it won't impact the next steps of the activity.

Click the Compute tab (under Configuration), and then click the listed node group. There, we'll see the Kubernetes version, instance type, status, etc.

Click dev in the breadcrumb navigation link at the top of the screen.

Click the Networking tab (under Configuration), where we'll see the VPC, subnets, etc.

Click the Logging tab (under Configuration), where we'll see the control plane logging info.

The control plane is abstracted — we can only interact with it using the command line utilities or the console. It’s not an EC2 instance we can log into and start running Linux commands on.
Navigate to EC2 > Instances, where you should see the instances have been launched.

Close out of the existing CLI window, if you still have it open.

Select the original t2.micro instance, and click Connect at the top of the window.

In the Connect to your instance dialog, select EC2 Instance Connect (browser-based SSH connection).

Click Connect.

In the CLI, check the cluster:

eksctl get cluster
Enable it to connect to our cluster:

aws eks update-kubeconfig --name dev --region us-east-1
Create a Deployment on Your EKS Cluster
Install Git:

sudo yum install -y git
Download the course files:

git clone https://github.com/ACloudGuru-Resources/Course_EKS-Basics
Change directory:

cd Course_EKS-Basics
Take a look at the deployment file:

cat nginx-deployment.yaml
Take a look at the service file:

cat nginx-svc.yaml
Create the service:

kubectl apply -f ./nginx-svc.yaml
Check its status:

kubectl get service
Copy the external DNS hostname of the load balancer, and paste it into a text file, as we'll need it in a minute.

Create the deployment:

kubectl apply -f ./nginx-deployment.yaml
Check its status:

kubectl get deployment
View the pods:

ku 